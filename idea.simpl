package mypack

import (
	"random things"
	"random things"
	"random things"
	"random things"
)


simpl mytempl(w io.Writer, ctx context.Context) {
	<div>hello world</div>

@	if true {
		<div>hi</div>
@ 	} else {
		<div>bye</div>
@	}

	<div>bye</div>

}

simpl base(w io.Writer, ctx context.Context, child func()) {
	<div>before</div>
	$child(w,ctx)$
	$`\${hi}`$
	\$100
	<div>after</div>
}


simpl index(w io.Writer, ctx context.Context) {
@	base(w,ctx, func() {
		the child does not even need the writer and context as args as the closure should just capture them
		<div>in between</div>
@	})

	Features: metatemplating, formatter, linter, (no optimizer because I want to reduce the disparity between prod and dev),
		simple file watcher like a-h/templ does
	
	This should either be its own cli tool that has a watcher or it should be just a 
	//go:generate simpl
	command.
	Then projects could version their command and it would be more integrated with the language probably.
	Idk which one is a better idea.
	Could do both to being with and then decide to stick with the one that seems better.
}

func randomGoCode() {
	this should be ignored and printed verbatim
}

simpl otherTempl(w io.Writer, ctx context.Context) {
	<div>hi</div>
}
